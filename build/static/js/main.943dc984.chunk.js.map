{"version":3,"sources":["images/earth.jpeg","pages/MainLayout.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","earthImage","require","Redirect","props","history","useHistory","to","push","React","createElement","Fragment","MainLayout","Switch","Route","exact","path","className","src","App","_React$useState","useState","_React$useState2","_slicedToArray","NavLink","activeClassName","data-tip","data-for","style","flexGrow","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","HashRouter","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"6JAAAA,EAAOC,QAAU,IAA0B,oC,uICGrCC,EAAaC,EAAQ,IAErBC,EAAW,SAACC,GAChB,IAAIC,EAAUC,cACPC,EAAMH,EAANG,GAEP,OADAF,EAAQG,KAAKD,GACNE,IAAAC,cAAAD,IAAAE,SAAA,OAqBMC,EAlBI,SAACR,GAClB,OACEK,IAAAC,cAACG,IAAM,KACLJ,IAAAC,cAACI,IAAK,CAACC,OAAK,EAACC,KAAK,KAChBP,IAAAC,cAAA,OAAKO,UAAU,aACbR,IAAAC,cAAA,OAAKO,UAAU,iBACbR,IAAAC,cAAA,OAAKO,UAAU,cAAcC,IAAKjB,IAClCQ,IAAAC,cAAA,YAAM,kEAIZD,IAAAC,cAACI,IAAK,CAACE,KAAK,KACVP,IAAAC,cAACP,EAAQ,CAACI,GAAG,SCkBNY,G,MA1BH,SAACf,GAEX,IAAAgB,EAAsDX,IAAMY,WAAUC,EAAAC,YAAAH,EAAA,GAA5CE,EAAA,GAAwBA,EAAA,GAGlD,OACEb,IAAAC,cAAA,OAAKO,UAAU,OACbR,IAAAC,cAAA,OAAKO,UAAU,cACbR,IAAAC,cAACc,IAAO,CAACT,OAAK,EAACU,gBAAgB,WAAWlB,GAAG,IAAImB,YAAA,EAASC,WAAS,sBAAqB,kBAGxFlB,IAAAC,cAAA,OAAKO,UAAU,UAEjBR,IAAAC,cAAA,OAAKO,UAAU,YACbR,IAAAC,cAAA,OAAKO,UAAU,cACbR,IAAAC,cAAA,OAAKkB,MAAO,CAACC,SAAU,IACrBpB,IAAAC,cAACE,EAAU,YCtBjBkB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBC,OAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,MCvEjEC,IAASC,OACP7C,IAAAC,cAAC6C,IAAU,KACT9C,IAAAC,cAACS,EAAG,OAELqC,SAASC,eAAe,SDQZ,WACb,GAA6C,kBAAmBnB,UAAW,CAGzE,GADkB,IAAIoB,IAAIC,GAAwB3B,OAAOC,UAC3C2B,SAAW5B,OAAOC,SAAS2B,OAIvC,OAGF5B,OAAO6B,iBAAiB,QAAQ,WAC9B,IAAMxB,EAAK,GAAAyB,OAAMH,GAAsB,sBAEnC7B,IAiDV,SAAiCO,GAE/B0B,MAAM1B,GACHI,MAAK,SAAAuB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C9B,UAAUC,cAAc8B,MAAM5B,MAAK,SAAAC,GACjCA,EAAa4B,aAAa7B,MAAK,WAC7BT,OAAOC,SAASsC,eAKpBnC,EAAgBC,MAGnBc,OAAM,WACLF,QAAQC,IACN,oEArEAsB,CAAwBnC,GAIxBC,UAAUC,cAAc8B,MAAM5B,MAAK,WACjCQ,QAAQC,IACN,gHAMJd,EAAgBC,OClCxBoC,K","file":"static/js/main.943dc984.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/earth.cf9e5a7f.jpeg\";","import React from \"react\";\nimport { Switch, Route, useHistory } from \"react-router-dom\";\n\nconst earthImage = require('../images/earth.jpeg');\n\nconst Redirect = (props) => {\n  let history = useHistory();\n  const {to} = props;\n  history.push(to);\n  return <></>;\n}\n\nconst MainLayout = (props) => {\n  return (\n    <Switch>\n      <Route exact path=\"/\">\n        <div className=\"Home-main\">\n          <div className=\"jumbotron col\">\n            <img className=\"earth-image\" src={earthImage} />\n            <span>Sustainable and safe recycling to ensure a greener tomorrow</span>\n          </div>\n        </div>\n      </Route>\n      <Route path=\"*\">\n        <Redirect to=\"/\" />\n      </Route>\n    </Switch>\n  );\n}\n\nexport default MainLayout;\n","/*\n *  Entry-point for the AvoBeso frontend.\n */\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport ReactTooltip from \"react-tooltip\";\n\nimport MainLayout from \"./pages/MainLayout.js\";\nimport {Footer} from \"./components/Footer.js\";\n\n////////////////////////////////////////////////////////////////////////////////\n\nimport \"./App.css\";\n\n////////////////////////////////////////////////////////////////////////////////\n\nconst App = (props) => {\n  // Handle logic to recognize the connector currently being activated.\n  const [activatingConnector, setActivatingConnector] = React.useState();\n  \n  ////////////////////////////////////////////////////////////////////////////\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        <NavLink exact activeClassName=\"isActive\" to=\"/\" data-tip data-for=\"networkInfoTooltip\">\n          Avobeso Global\n        </NavLink>\n        <div className=\"grow\"></div>\n      </div>\n      <div className=\"App-body\">\n        <div className=\"App-scroll\">\n          <div style={{flexGrow: 1}}>\n            <MainLayout />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nexport default App;\n\n////////////////////////////////////////////////////////////////////////////////\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter } from \"react-router-dom\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render((\n  <HashRouter>\n    <App />\n  </HashRouter>\n), document.getElementById(\"root\"));\n\nregisterServiceWorker();\n"],"sourceRoot":""}